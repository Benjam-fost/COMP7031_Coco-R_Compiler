import java.util.*;

COMPILER BinaryTree
    Tree tree;

    class Node{
        String name;
        Node left, right;
        Node(String s) { name = s; }
    }

    static void dump(Node n, int indent) {
        for (int i = 0; i < indent; i++) System.out.print(' ');
        System.out.print(" (");
        if (n != null) {
            System.out.print(n.name);
            if (n.left != null || n.right != null) {
                dump(n.left, indent + 2);
                dump(n.right, indent + 2);
                for (int i = 0; i < indent; i++) System.out.print(' ');
            }
        }
        System.out.println(')');
    }

CHARACTERS
    tab = '\t'.
    cr = '\r'.
    lf = '\n'.
    noQuote = ANY - '"'.
    letter = 'a'..'z' + 'A'..'Z'.

TOKENS
    string = letter {letter}.

COMMENTS FROM "//" TO cr lf

COMMENTS FROM "/*" TO "*/" NESTED

IGNORE tab+cr+lf

PRODUCTIONS
    BinaryTree  (. Node node; .)    =   TreeNode<out node>  (. dump(node, 0); .)    .
    TreeNode<out Node n>    (. Node child; .)  = '('    (. n = null; .)   [string   (. n = new Node(t.val); .)   [TreeNode<out n.left> TreeNode<out n.right>]] ')'   .

END BinaryTree.